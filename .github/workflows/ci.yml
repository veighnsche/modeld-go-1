name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Go)
    runs-on: ubuntu-latest
    env:
      SWAG_VERSION: v1.16.6
      GOLANGCI_LINT_VERSION: v1.56.2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify module files tidy
        run: |
          set -euo pipefail
          go mod tidy
          if ! git diff --quiet -- go.mod go.sum; then
            echo "go.mod/go.sum are not tidy. Run 'go mod tidy' and commit the changes." >&2
            git --no-pager diff -- go.mod go.sum || true
            exit 1
          fi

      - name: Check formatting (gofmt)
        run: |
          set -euo pipefail
          unformatted=$(gofmt -l . | grep -v '^vendor/' || true)
          if [ -n "$unformatted" ]; then
            echo "The following files are not gofmt-formatted:" >&2
            echo "$unformatted" >&2
            exit 1
          fi

      - name: Static analysis (go vet)
        run: |
          set -euo pipefail
          go vet ./...

      - name: Static analysis (go vet with swagger tag)
        run: |
          set -euo pipefail
          go vet -tags=swagger ./...

      - name: Generate Swagger docs
        run: |
          set -euo pipefail
          go run github.com/swaggo/swag/cmd/swag@${SWAG_VERSION} init -g cmd/modeld/main.go -o docs

      - name: Validate Swagger artifacts exist
        run: |
          set -euo pipefail
          test -f docs/swagger.json || { echo "docs/swagger.json missing" >&2; exit 1; }
          test -f docs/swagger.yaml || { echo "docs/swagger.yaml missing" >&2; exit 1; }
          test -f docs/docs.go || { echo "docs/docs.go missing" >&2; exit 1; }

      - name: Verify Swagger docs up-to-date
        run: |
          set -euo pipefail
          # Fail if running generation produced a diff (i.e., docs were stale)
          if ! git diff --quiet -- docs; then
            echo "Swagger docs are out of date. Run 'make swagger-gen' locally and commit the changes." >&2
            git --no-pager diff -- docs || true
            exit 1
          fi

      - name: Compile (default build)
        run: |
          set -euo pipefail
          go build ./...

      - name: Compile (swagger build tag)
        run: |
          set -euo pipefail
          go build -tags=swagger ./...

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Run golangci-lint
        run: |
          set -euo pipefail
          golangci-lint run

      - name: Run tests with coverage
        run: |
          go test ./... -covermode=atomic -coverprofile=coverage.out -v

      - name: Run tests with race detector
        run: |
          go test -race ./...

      - name: Enforce minimum coverage (80%)
        run: |
          threshold=80
          percent=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","",$3); print $3}')
          awk -v p="$percent" -v t="$threshold" 'BEGIN { if (p+0 < t+0) { printf("Coverage %.2f%% is below threshold %d%%\n", p, t); exit 1 } else { printf("Coverage %.2f%% meets threshold %d%%\n", p, t); exit 0 } }'

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.out
          flags: unittests
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e-python:
    name: E2E (Python)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Download Go dependencies
        run: go mod download

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('tests/e2e_py/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/e2e_py/requirements.txt

      - name: Run Python E2E tests
        run: |
          set -o pipefail
          pytest -q tests/e2e_py --junitxml=pytest-report.xml 2>&1 | tee pytest-output.txt

      - name: Upload pytest artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-artifacts-${{ matrix.python-version }}
          path: |
            pytest-report.xml
            pytest-output.txt

  e2e-cypress:
    name: E2E (Cypress UI)
    runs-on: ubuntu-latest
    env:
      CYPRESS_BASE_URL: http://localhost:5173
      CYPRESS_USE_MOCKS: '1'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install root dev deps (Cypress)
        run: pnpm install --frozen-lockfile

      - name: Install web deps
        run: pnpm -C web install --frozen-lockfile

      - name: Build web
        run: pnpm -C web build

      - name: Start web preview
        run: pnpm -C web preview --port 5173 &

      - name: Wait for web to be up
        run: node scripts/poll-url.js "$CYPRESS_BASE_URL" 200 60

      - name: Run Cypress (headless)
        run: pnpm run test:e2e:run

      - name: Upload Cypress videos and screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            e2e/artifacts/screenshots
            e2e/artifacts/videos

  e2e-cypress-live:
    name: E2E (Cypress UI + Live API)
    runs-on: ubuntu-latest
    env:
      CYPRESS_BASE_URL: http://localhost:5173
      CYPRESS_USE_MOCKS: '0'
      API_ADDR: http://localhost:18080
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Install root dev deps (Cypress)
        run: pnpm install --frozen-lockfile

      - name: Install web deps
        run: pnpm -C web install --frozen-lockfile

      - name: Build web
        run: pnpm -C web build

      - name: Start web preview
        run: pnpm -C web preview --port 5173 &

      - name: Wait for web to be up
        run: node scripts/poll-url.js "$CYPRESS_BASE_URL" 200 60

      - name: Prepare models dir
        run: |
          set -euo pipefail
          mkdir -p models_tmp
          touch models_tmp/alpha.gguf
          touch models_tmp/beta.gguf

      - name: Start API server
        run: |
          set -euo pipefail
          go run ./cmd/modeld --addr :18080 --models-dir $(pwd)/models_tmp --default-model alpha.gguf &

      - name: Wait for API health
        env:
          CYPRESS_API_HEALTH_URL: ${{ env.API_ADDR }}/healthz
        run: node scripts/poll-url.js "$CYPRESS_API_HEALTH_URL" 200 60

      - name: Run Cypress (headless, live mode)
        env:
          CYPRESS_API_HEALTH_URL: ${{ env.API_ADDR }}/healthz
          CYPRESS_API_READY_URL: ${{ env.API_ADDR }}/readyz
          CYPRESS_API_STATUS_URL: ${{ env.API_ADDR }}/status
        run: pnpm run test:e2e:run

      - name: Upload Cypress videos and screenshots on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts-live
          path: |
            e2e/artifacts/screenshots
            e2e/artifacts/videos
