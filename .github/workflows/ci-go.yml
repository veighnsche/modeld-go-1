name: CI (Go)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'docs/**'
      - '.github/workflows/ci-go.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'docs/**'
      - '.github/workflows/ci-go.yml'

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Go)
    runs-on: ubuntu-latest
    env:
      SWAG_VERSION: v1.16.6
      GOLANGCI_LINT_VERSION: v1.62.0

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Debug Go environment (1.24.x)
        run: |
          set -euo pipefail
          echo "=== which go ===" && which go || true
          echo "=== go version ===" && go version || true
          echo "=== go env (key subset) ===" && go env GOROOT GOPATH GOMOD GOMODCACHE GOTOOLCHAIN GOEXPERIMENT || true
          echo "=== go env -json ===" && go env -json || true
          echo "=== go tool compile -V ===" && go tool compile -V || true
          echo "=== uname -a ===" && uname -a || true
          echo "=== cat go.mod ===" && sed -n '1,80p' go.mod || true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify module files tidy
        if: ${{ env.ACT != 'true' }}
        run: |
          set -euo pipefail
          go mod tidy
          if ! git diff --quiet -- go.mod go.sum; then
            echo "go.mod/go.sum are not tidy. Run 'go mod tidy' and commit the changes." >&2
            git --no-pager diff -- go.mod go.sum || true
            exit 1
          fi

      - name: Check formatting (gofmt)
        run: |
          set -euo pipefail
          unformatted=$(gofmt -l . | grep -v '^vendor/' || true)
          if [ -n "$unformatted" ]; then
            echo "The following files are not gofmt-formatted:" >&2
            echo "$unformatted" >&2
            exit 1
          fi

      - name: Static analysis (go vet)
        run: |
          set -euo pipefail
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go vet ./...

      - name: Static analysis (go vet with swagger tag)
        run: |
          set -euo pipefail
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go vet -tags=swagger ./...

      - name: Generate Swagger docs
        run: |
          set -euo pipefail
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go run github.com/swaggo/swag/cmd/swag@${SWAG_VERSION} init -g cmd/modeld/main.go -o docs

      - name: Validate Swagger artifacts exist
        run: |
          set -euo pipefail
          test -f docs/swagger.json || { echo "docs/swagger.json missing" >&2; exit 1; }
          test -f docs/swagger.yaml || { echo "docs/swagger.yaml missing" >&2; exit 1; }
          test -f docs/docs.go || { echo "docs/docs.go missing" >&2; exit 1; }

      - name: Verify Swagger docs up-to-date
        run: |
          set -euo pipefail
          if ! git diff --quiet -- docs; then
            echo "Swagger docs are out of date. Run 'make swagger-gen' locally and commit the changes." >&2
            git --no-pager diff -- docs || true
            exit 1
          fi

      - name: Compile (default build)
        run: |
          set -euo pipefail
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go build ./...

      - name: Build testctl (thin CLI)
        run: |
          set -euo pipefail
          mkdir -p bin
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go build -o bin/testctl ./cmd/testctl

      - name: Smoke test testctl CLI
        run: |
          set -euo pipefail
          bin/testctl --help >/dev/null

      - name: Upload testctl binary artifact
        if: ${{ env.ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: testctl-bin-ubuntu
          path: bin/testctl

      - name: Compile (swagger build tag)
        run: |
          set -euo pipefail
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go build -tags=swagger ./...

      - name: Warm module cache and export data for linter
        run: |
          set -euo pipefail
          go env
          # Ensure all deps and export data are available to the analyzer
          go list -deps ./... > /dev/null
          # Build packages to populate export data cache; ignore failures to not block
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go build ./... || true

      - name: Set up Go for linter (1.23.x)
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Debug Go environment (1.23.x for linter)
        env:
          GOTOOLCHAIN: local
        run: |
          set -euo pipefail
          echo "=== which go ===" && which go || true
          echo "=== go version ===" && go version || true
          echo "=== go env (key subset) ===" && go env GOROOT GOPATH GOMOD GOMODCACHE GOTOOLCHAIN GOEXPERIMENT || true
          echo "=== go env -json ===" && go env -json || true
          echo "=== go tool compile -V ===" && go tool compile -V || true
          echo "=== uname -a ===" && uname -a || true
          echo "=== cat go.mod ===" && sed -n '1,80p' go.mod || true

      - name: Warm module cache and export data for linter (Go 1.23.x)
        env:
          GOTOOLCHAIN: local
        run: |
          set -euo pipefail
          go env
          go mod download
          go list -deps ./... > /dev/null
          go build ./... || true

      - name: Lint (golangci-lint)
        if: ${{ env.ACT != 'true' }}
        uses: golangci/golangci-lint-action@v6
        env:
          GOTOOLCHAIN: local
          GO111MODULE: on
          CGO_ENABLED: 1
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --go=1.23 --modules-download-mode=mod --timeout=5m
          skip-cache: true
          skip-save-cache: true

      - name: Restore Go version (1.24.x)
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Run tests with coverage (library packages only)
        run: |
          set -euo pipefail
          pkgs=$(go list ./... | grep -v '^modeld/cmd/' | grep -v '^modeld/docs$' | grep -v '^modeld/internal/testctl$')
          echo "Testing packages:" $pkgs
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH CGO_ENABLED=0 \
            go test $pkgs -covermode=atomic -coverprofile=coverage.out -v

      - name: Run tests with race detector
        run: |
          env -u CGO_LDFLAGS -u CGO_CFLAGS -u LD_LIBRARY_PATH \
            go test -race ./...

      - name: Enforce minimum coverage (80%)
        run: |
          threshold=80
          percent=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","",$3); print $3}')
          awk -v p="$percent" -v t="$threshold" 'BEGIN { if (p+0 < t+0) { printf("Coverage %.2f%% is below threshold %d%%\n", p, t); exit 1 } else { printf("Coverage %.2f%% meets threshold %d%%\n", p, t); exit 0 } }'

      - name: Upload coverage artifact
        if: ${{ env.ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

      - name: Upload coverage to Codecov
        if: ${{ env.ACT != 'true' }}
        uses: codecov/codecov-action@v4
        with:
          files: coverage.out
          flags: unittests
          fail_ci_if_error: true

      - name: Final Go environment (always)
        if: always()
        run: |
          set -euo pipefail
          echo "=== FINAL which go ===" && which go || true
          echo "=== FINAL go version ===" && go version || true
          echo "=== FINAL go env (key subset) ===" && go env GOROOT GOPATH GOMOD GOMODCACHE GOTOOLCHAIN GOEXPERIMENT || true
          echo "=== FINAL go env -json ===" && go env -json || true
          echo "=== FINAL go tool compile -V ===" && go tool compile -V || true
          echo "=== FINAL uname -a ===" && uname -a || true
          echo "=== FINAL cat go.mod ===" && sed -n '1,80p' go.mod || true
