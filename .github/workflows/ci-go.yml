name: CI (Go)

on:
  push:
    branches: [ main, master ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'docs/**'
      - '.github/workflows/ci-go.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**/*.go'
      - 'go.mod'
      - 'go.sum'
      - 'docs/**'
      - '.github/workflows/ci-go.yml'

permissions:
  contents: read
  pull-requests: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test (Go)
    runs-on: ubuntu-latest
    env:
      SWAG_VERSION: v1.16.6
      GOLANGCI_LINT_VERSION: v1.56.2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify module files tidy
        run: |
          set -euo pipefail
          go mod tidy
          if ! git diff --quiet -- go.mod go.sum; then
            echo "go.mod/go.sum are not tidy. Run 'go mod tidy' and commit the changes." >&2
            git --no-pager diff -- go.mod go.sum || true
            exit 1
          fi

      - name: Check formatting (gofmt)
        run: |
          set -euo pipefail
          unformatted=$(gofmt -l . | grep -v '^vendor/' || true)
          if [ -n "$unformatted" ]; then
            echo "The following files are not gofmt-formatted:" >&2
            echo "$unformatted" >&2
            exit 1
          fi

      - name: Static analysis (go vet)
        run: |
          set -euo pipefail
          go vet ./...

      - name: Static analysis (go vet with swagger tag)
        run: |
          set -euo pipefail
          go vet -tags=swagger ./...

      - name: Generate Swagger docs
        run: |
          set -euo pipefail
          go run github.com/swaggo/swag/cmd/swag@${SWAG_VERSION} init -g cmd/modeld/main.go -o docs

      - name: Validate Swagger artifacts exist
        run: |
          set -euo pipefail
          test -f docs/swagger.json || { echo "docs/swagger.json missing" >&2; exit 1; }
          test -f docs/swagger.yaml || { echo "docs/swagger.yaml missing" >&2; exit 1; }
          test -f docs/docs.go || { echo "docs/docs.go missing" >&2; exit 1; }

      - name: Verify Swagger docs up-to-date
        run: |
          set -euo pipefail
          if ! git diff --quiet -- docs; then
            echo "Swagger docs are out of date. Run 'make swagger-gen' locally and commit the changes." >&2
            git --no-pager diff -- docs || true
            exit 1
          fi

      - name: Compile (default build)
        run: |
          set -euo pipefail
          go build ./...

      - name: Build testctl (thin CLI)
        run: |
          set -euo pipefail
          mkdir -p bin
          go build -o bin/testctl ./cmd/testctl

      - name: Smoke test testctl CLI
        run: |
          set -euo pipefail
          bin/testctl --help >/dev/null

      - name: Compile (swagger build tag)
        run: |
          set -euo pipefail
          go build -tags=swagger ./...

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}

      - name: Run golangci-lint
        run: |
          set -euo pipefail
          golangci-lint run

      - name: Run tests with coverage
        run: |
          go test ./... -covermode=atomic -coverprofile=coverage.out -v

      - name: Run tests with race detector
        run: |
          go test -race ./...

      - name: Enforce minimum coverage (80%)
        run: |
          threshold=80
          percent=$(go tool cover -func=coverage.out | awk '/^total:/ {gsub("%","",$3); print $3}')
          awk -v p="$percent" -v t="$threshold" 'BEGIN { if (p+0 < t+0) { printf("Coverage %.2f%% is below threshold %d%%\n", p, t); exit 1 } else { printf("Coverage %.2f%% meets threshold %d%%\n", p, t); exit 0 } }'

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.out
          flags: unittests
          fail_ci_if_error: true
